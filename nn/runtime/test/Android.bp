/*
 * Copyright 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

cc_defaults {
    name: "NeuralNetworksTest_default_libs",
    defaults: ["neuralnetworks_defaults"],
    host_supported: false,
    // b/109953668, disable OpenMP
    // openmp: true,
    shared_libs: [
        "android.hardware.neuralnetworks@1.0",
        "android.hardware.neuralnetworks@1.1",
        "android.hardware.neuralnetworks@1.2",
        "android.hidl.allocator@1.0",
        "android.hidl.memory@1.0",
        "libandroid",
        "libbase",
        "libbinder",
        "libcutils",
        "libfmq",
        "libhidlbase",
        "libhidlmemory",
        "libhidltransport",
        "liblog",
        "libnativewindow",
        "libtextclassifier_hash",
        "libui",
        "libutils",
    ],
    static_libs: [
        "libc++fs",
        "libcrypto",
    ],
    header_libs: [
        "libneuralnetworks_generated_test_harness_headers",
    ],
}

cc_defaults {
    name: "NeuralNetworksTest_defaults",
    defaults: ["NeuralNetworksTest_default_libs"],
    srcs: [
        // Subset of tests that rely only on public functionality.
        //
        // Changes to this list must be reflected in cts/tests/tests/neuralnetworks/Android.mk
        // to ensure CTS tests coverage.
        "TestGenerated.cpp",
        "TestMemory.cpp",
        "TestOperandExtraParams.cpp",
        "TestTrivialModel.cpp",
        "TestUnknownDimensions.cpp",
        "TestUnspecifiedDimensions.cpp",
        "TestValidateModel.cpp",
        "TestValidateOperations.cpp",
        "TestValidation.cpp",
        "TestWrapper.cpp",
        "generated/examples/*.cpp",
        "generated/models/*.cpp",
        "generated/tests/*.cpp",

        "TestNeuralNetworksWrapper.cpp",
    ],
    static_libs: [
        "libgmock",
    ],
    cflags: [
        "-UNDEBUG",
    ],
}

cc_test {
    name: "NeuralNetworksTest_shared_partial",
    defaults: ["NeuralNetworksTest_defaults"],
    srcs: [
        "TestMain.cpp",
    ],
    cflags: [
        "-DNNTEST_ONLY_PUBLIC_API",
    ],
    shared_libs: [
        "libneuralnetworks",
        "libtextclassifier_hash",
    ],
}

cc_defaults {
    name: "NeuralNetworksTest_static_defaults",
    defaults: ["NeuralNetworksTest_defaults"],
    srcs: [
        // Tests that rely on non-public functionality (i.e., symbols
        // not exported from libneuralnetworks.so).
        //
        // b/109953668, disable OpenMP
        // "TestOpenmpSettings.cpp",
        "TestCompilationCaching.cpp",
        "TestCompliance.cpp",
        "TestExecution.cpp",
        "TestExtensions.cpp",
        "TestIntrospectionControl.cpp",
        "TestMemoryInternal.cpp",
        "TestPartitioning.cpp",
        "TestPartitioningRandom.cpp",
        "fibonacci_extension/FibonacciDriver.cpp",
        "fibonacci_extension/FibonacciExtensionTest.cpp",

        "TestMain.cpp",

        "Bridge.cpp",
    ],
    static_libs: [
        "libSampleDriver",
        "libgmock",
        "libneuralnetworks",
        "libneuralnetworks_common",
    ],
    shared_libs: [
        "libcutils",
    ],
    header_libs: [
        "libneuralnetworks_private_headers",
        "neuralnetworks_test_vendor_fibonacci_extension",
    ],
    test_suites: [
        "general-tests",
    ],
}

cc_test {
    name: "NeuralNetworksTest_static",
    defaults: ["NeuralNetworksTest_static_defaults"],
}

cc_test {
    name: "NeuralNetworksTest_static_fuzzing",
    defaults: ["NeuralNetworksTest_default_libs"],
    srcs: [
        "TestNeuralNetworksWrapper.cpp",
        "fuzzing/OperationManager.cpp",
        "fuzzing/RandomGraphGenerator.cpp",
        "fuzzing/RandomGraphGeneratorUtils.cpp",
        "fuzzing/RandomVariable.cpp",
        "fuzzing/TestRandomGraph.cpp",
        "fuzzing/operation_signatures/*.cpp",
    ],
    static_libs: [
        "libSampleDriver",
        "libgmock",
        "libneuralnetworks",
        "libneuralnetworks_common",
    ],
    header_libs: [
        "libneuralnetworks_private_headers",
    ],
}

cc_test {
    name: "NeuralNetworksTest_static_asan",
    defaults: ["NeuralNetworksTest_static_defaults"],
    sanitize: {
        address: true,
    },
}

cc_test {
    name: "NeuralNetworksTest_static_ubsan",
    defaults: ["NeuralNetworksTest_static_defaults"],
    sanitize: {
        undefined: true,
        all_undefined: true,
        diag: {
            undefined: true,
        },
    },
}

cc_defaults {
    name: "NeuralNetworksTest_mt_defaults",
    defaults: ["NeuralNetworksTest_default_libs"],
    srcs: [
        "TestGenerated.cpp",
        "TestMain.cpp",
        "TestNeuralNetworksWrapper.cpp",
        "generated/examples/*.cpp",
        "generated/models/*.cpp",
        "generated/tests/*.cpp",
    ],
    cflags: [
        "-DNNTEST_MULTITHREADED",
    ],
    static_libs: [
        "libSampleDriver",
        "libgmock",
        "libneuralnetworks",
        "libneuralnetworks_common",
    ],
    shared_libs: [
        "libcutils",
    ],
    header_libs: [
        "libneuralnetworks_private_headers",
    ],
}

cc_test {
    name: "NeuralNetworksTest_mt_static",
    defaults: ["NeuralNetworksTest_mt_defaults"],
}

cc_test {
    // Note: tsan not supported on Android (yet)
    name: "NeuralNetworksTest_mt_static_asan",
    defaults: ["NeuralNetworksTest_mt_defaults"],
    sanitize: {
        address: true,
    },
}

cc_library_static {
    name: "CtsNNAPITests_static",
    srcs: [
        "TestGenerated.cpp",
        "TestMemory.cpp",
        "TestNeuralNetworksWrapper.cpp",
        "TestTrivialModel.cpp",
        "TestUnknownDimensions.cpp",
        "TestValidateModel.cpp",
        "TestValidateOperations.cpp",
        "TestValidation.cpp",
        "TestWrapper.cpp",
        "fuzzing/OperationManager.cpp",
        "fuzzing/RandomGraphGenerator.cpp",
        "fuzzing/RandomGraphGeneratorUtils.cpp",
        "fuzzing/RandomVariable.cpp",
        "fuzzing/TestRandomGraph.cpp",
        "fuzzing/operation_signatures/*.cpp",
        "generated/examples/*.cpp",
        "generated/models/*.cpp",
        "generated/tests/*.cpp",
    ],
    include_dirs: [
        "frameworks/ml/nn/common/include",
        "frameworks/ml/nn/runtime/",
        "frameworks/ml/nn/runtime/include/",
        "frameworks/ml/nn/tools/test_generator/include",
    ],
    cflags: [
        "-DNNTEST_CTS",
        "-DNNTEST_ONLY_PUBLIC_API",
        "-Wall",
        "-Werror",
    ],
    shared_libs: [
        "libandroid",
        "liblog",
        "libneuralnetworks",
    ],
    static_libs: [
        "libgmock_ndk",
        "libgtest_ndk_c++",
    ],
    sdk_version: "current",
    stl: "c++_static",
}

filegroup {
    name: "VtsHalNeuralNetworksV1_0_all_generated_V1_0_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_0/models/V1_0/*.cpp",
        "generated/vts/V1_0/tests/V1_0/*.cpp",
    ],
}

filegroup {
    name: "VtsHalNeuralNetworksV1_1_all_generated_V1_0_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_1/models/V1_0/*.cpp",
        "generated/vts/V1_1/tests/V1_0/*.cpp",
    ],
}

filegroup {
    name: "VtsHalNeuralNetworksV1_1_all_generated_V1_1_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_1/models/V1_1/*.cpp",
        "generated/vts/V1_1/tests/V1_1/*.cpp",
    ],
}

filegroup {
    name: "VtsHalNeuralNetworksV1_2_all_generated_V1_0_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_2/models/V1_0/*.cpp",
        "generated/vts/V1_2/tests/V1_0/*.cpp",
    ],
}

filegroup {
    name: "VtsHalNeuralNetworksV1_2_all_generated_V1_1_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_2/models/V1_1/*.cpp",
        "generated/vts/V1_2/tests/V1_1/*.cpp",
    ],
}

filegroup {
    name: "VtsHalNeuralNetworksV1_2_all_generated_V1_2_tests",
    srcs: [
        "generated/examples/*.cpp",
        "generated/vts/V1_2/models/V1_2/*.cpp",
        "generated/vts/V1_2/tests/V1_2/*.cpp",
    ],
}

// CompilationCachingTests in VtsHalNeuralnetworksV1_2TargetTest depend on MobileNets.
filegroup {
    name: "VtsHalNeuralNetworksV1_2_mobilenets",
    srcs: [
        "generated/vts/V1_2/models/V1_0/mobilenet_224_gender_basic_fixed.model.cpp",
        "generated/vts/V1_2/models/V1_0/mobilenet_quantized.model.cpp",
    ],
}
