// clang-format off
// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_vts_test.sh
// Generated from: argmax_1_float.mod.py.
namespace argmax_1_float {
// Generated argmax_1_float test
#include "examples/argmax_1_float.example.cpp"
// Generated model constructor
#include "vts_models/argmax_1_float.model.cpp"
} // namespace argmax_1_float

TEST_F(NeuralnetworksHidlTest, argmax_1_float) {
  generated_tests::Execute(device,
                           argmax_1_float::createTestModel,
                           argmax_1_float::is_ignored,
                           argmax_1_float::examples);
}

// Generated from: argmax_1_float_relaxed.mod.py.
namespace argmax_1_float_relaxed {
// Generated argmax_1_float_relaxed test
#include "examples/argmax_1_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/argmax_1_float_relaxed.model.cpp"
} // namespace argmax_1_float_relaxed

TEST_F(NeuralnetworksHidlTest, argmax_1_float_relaxed) {
  generated_tests::Execute(device,
                           argmax_1_float_relaxed::createTestModel,
                           argmax_1_float_relaxed::is_ignored,
                           argmax_1_float_relaxed::examples);
}

// Generated from: argmax_1_int32.mod.py.
namespace argmax_1_int32 {
// Generated argmax_1_int32 test
#include "examples/argmax_1_int32.example.cpp"
// Generated model constructor
#include "vts_models/argmax_1_int32.model.cpp"
} // namespace argmax_1_int32

TEST_F(NeuralnetworksHidlTest, argmax_1_int32) {
  generated_tests::Execute(device,
                           argmax_1_int32::createTestModel,
                           argmax_1_int32::is_ignored,
                           argmax_1_int32::examples);
}

// Generated from: argmax_1_quant8.mod.py.
namespace argmax_1_quant8 {
// Generated argmax_1_quant8 test
#include "examples/argmax_1_quant8.example.cpp"
// Generated model constructor
#include "vts_models/argmax_1_quant8.model.cpp"
} // namespace argmax_1_quant8

TEST_F(NeuralnetworksHidlTest, argmax_1_quant8) {
  generated_tests::Execute(device,
                           argmax_1_quant8::createTestModel,
                           argmax_1_quant8::is_ignored,
                           argmax_1_quant8::examples);
}

// Generated from: argmax_2_float.mod.py.
namespace argmax_2_float {
// Generated argmax_2_float test
#include "examples/argmax_2_float.example.cpp"
// Generated model constructor
#include "vts_models/argmax_2_float.model.cpp"
} // namespace argmax_2_float

TEST_F(NeuralnetworksHidlTest, argmax_2_float) {
  generated_tests::Execute(device,
                           argmax_2_float::createTestModel,
                           argmax_2_float::is_ignored,
                           argmax_2_float::examples);
}

// Generated from: argmax_2_float_relaxed.mod.py.
namespace argmax_2_float_relaxed {
// Generated argmax_2_float_relaxed test
#include "examples/argmax_2_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/argmax_2_float_relaxed.model.cpp"
} // namespace argmax_2_float_relaxed

TEST_F(NeuralnetworksHidlTest, argmax_2_float_relaxed) {
  generated_tests::Execute(device,
                           argmax_2_float_relaxed::createTestModel,
                           argmax_2_float_relaxed::is_ignored,
                           argmax_2_float_relaxed::examples);
}

// Generated from: argmax_2_int32.mod.py.
namespace argmax_2_int32 {
// Generated argmax_2_int32 test
#include "examples/argmax_2_int32.example.cpp"
// Generated model constructor
#include "vts_models/argmax_2_int32.model.cpp"
} // namespace argmax_2_int32

TEST_F(NeuralnetworksHidlTest, argmax_2_int32) {
  generated_tests::Execute(device,
                           argmax_2_int32::createTestModel,
                           argmax_2_int32::is_ignored,
                           argmax_2_int32::examples);
}

// Generated from: argmax_2_quant8.mod.py.
namespace argmax_2_quant8 {
// Generated argmax_2_quant8 test
#include "examples/argmax_2_quant8.example.cpp"
// Generated model constructor
#include "vts_models/argmax_2_quant8.model.cpp"
} // namespace argmax_2_quant8

TEST_F(NeuralnetworksHidlTest, argmax_2_quant8) {
  generated_tests::Execute(device,
                           argmax_2_quant8::createTestModel,
                           argmax_2_quant8::is_ignored,
                           argmax_2_quant8::examples);
}

// Generated from: argmax_3_float.mod.py.
namespace argmax_3_float {
// Generated argmax_3_float test
#include "examples/argmax_3_float.example.cpp"
// Generated model constructor
#include "vts_models/argmax_3_float.model.cpp"
} // namespace argmax_3_float

TEST_F(NeuralnetworksHidlTest, argmax_3_float) {
  generated_tests::Execute(device,
                           argmax_3_float::createTestModel,
                           argmax_3_float::is_ignored,
                           argmax_3_float::examples);
}

// Generated from: argmin_1_float.mod.py.
namespace argmin_1_float {
// Generated argmin_1_float test
#include "examples/argmin_1_float.example.cpp"
// Generated model constructor
#include "vts_models/argmin_1_float.model.cpp"
} // namespace argmin_1_float

TEST_F(NeuralnetworksHidlTest, argmin_1_float) {
  generated_tests::Execute(device,
                           argmin_1_float::createTestModel,
                           argmin_1_float::is_ignored,
                           argmin_1_float::examples);
}

// Generated from: argmin_1_float_relaxed.mod.py.
namespace argmin_1_float_relaxed {
// Generated argmin_1_float_relaxed test
#include "examples/argmin_1_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/argmin_1_float_relaxed.model.cpp"
} // namespace argmin_1_float_relaxed

TEST_F(NeuralnetworksHidlTest, argmin_1_float_relaxed) {
  generated_tests::Execute(device,
                           argmin_1_float_relaxed::createTestModel,
                           argmin_1_float_relaxed::is_ignored,
                           argmin_1_float_relaxed::examples);
}

// Generated from: argmin_1_int32.mod.py.
namespace argmin_1_int32 {
// Generated argmin_1_int32 test
#include "examples/argmin_1_int32.example.cpp"
// Generated model constructor
#include "vts_models/argmin_1_int32.model.cpp"
} // namespace argmin_1_int32

TEST_F(NeuralnetworksHidlTest, argmin_1_int32) {
  generated_tests::Execute(device,
                           argmin_1_int32::createTestModel,
                           argmin_1_int32::is_ignored,
                           argmin_1_int32::examples);
}

// Generated from: argmin_1_quant8.mod.py.
namespace argmin_1_quant8 {
// Generated argmin_1_quant8 test
#include "examples/argmin_1_quant8.example.cpp"
// Generated model constructor
#include "vts_models/argmin_1_quant8.model.cpp"
} // namespace argmin_1_quant8

TEST_F(NeuralnetworksHidlTest, argmin_1_quant8) {
  generated_tests::Execute(device,
                           argmin_1_quant8::createTestModel,
                           argmin_1_quant8::is_ignored,
                           argmin_1_quant8::examples);
}

// Generated from: argmin_2_float.mod.py.
namespace argmin_2_float {
// Generated argmin_2_float test
#include "examples/argmin_2_float.example.cpp"
// Generated model constructor
#include "vts_models/argmin_2_float.model.cpp"
} // namespace argmin_2_float

TEST_F(NeuralnetworksHidlTest, argmin_2_float) {
  generated_tests::Execute(device,
                           argmin_2_float::createTestModel,
                           argmin_2_float::is_ignored,
                           argmin_2_float::examples);
}

// Generated from: argmin_2_float_relaxed.mod.py.
namespace argmin_2_float_relaxed {
// Generated argmin_2_float_relaxed test
#include "examples/argmin_2_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/argmin_2_float_relaxed.model.cpp"
} // namespace argmin_2_float_relaxed

TEST_F(NeuralnetworksHidlTest, argmin_2_float_relaxed) {
  generated_tests::Execute(device,
                           argmin_2_float_relaxed::createTestModel,
                           argmin_2_float_relaxed::is_ignored,
                           argmin_2_float_relaxed::examples);
}

// Generated from: argmin_2_int32.mod.py.
namespace argmin_2_int32 {
// Generated argmin_2_int32 test
#include "examples/argmin_2_int32.example.cpp"
// Generated model constructor
#include "vts_models/argmin_2_int32.model.cpp"
} // namespace argmin_2_int32

TEST_F(NeuralnetworksHidlTest, argmin_2_int32) {
  generated_tests::Execute(device,
                           argmin_2_int32::createTestModel,
                           argmin_2_int32::is_ignored,
                           argmin_2_int32::examples);
}

// Generated from: argmin_2_quant8.mod.py.
namespace argmin_2_quant8 {
// Generated argmin_2_quant8 test
#include "examples/argmin_2_quant8.example.cpp"
// Generated model constructor
#include "vts_models/argmin_2_quant8.model.cpp"
} // namespace argmin_2_quant8

TEST_F(NeuralnetworksHidlTest, argmin_2_quant8) {
  generated_tests::Execute(device,
                           argmin_2_quant8::createTestModel,
                           argmin_2_quant8::is_ignored,
                           argmin_2_quant8::examples);
}

// Generated from: argmin_3_float.mod.py.
namespace argmin_3_float {
// Generated argmin_3_float test
#include "examples/argmin_3_float.example.cpp"
// Generated model constructor
#include "vts_models/argmin_3_float.model.cpp"
} // namespace argmin_3_float

TEST_F(NeuralnetworksHidlTest, argmin_3_float) {
  generated_tests::Execute(device,
                           argmin_3_float::createTestModel,
                           argmin_3_float::is_ignored,
                           argmin_3_float::examples);
}

// Generated from: expand_dims.mod.py.
namespace expand_dims {
// Generated expand_dims test
#include "examples/expand_dims.example.cpp"
// Generated model constructor
#include "vts_models/expand_dims.model.cpp"
} // namespace expand_dims

TEST_F(NeuralnetworksHidlTest, expand_dims) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel,
                           expand_dims::is_ignored,
                           expand_dims::examples);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed,
                           expand_dims::is_ignored_relaxed,
                           expand_dims::examples_relaxed);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_quant8) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8,
                           expand_dims::is_ignored_quant8,
                           expand_dims::examples_quant8);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_int32) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32,
                           expand_dims::is_ignored_int32,
                           expand_dims::examples_int32);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_2,
                           expand_dims::is_ignored_2,
                           expand_dims::examples_2);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_2,
                           expand_dims::is_ignored_relaxed_2,
                           expand_dims::examples_relaxed_2);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_2,
                           expand_dims::is_ignored_quant8_2,
                           expand_dims::examples_quant8_2);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_int32_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_2,
                           expand_dims::is_ignored_int32_2,
                           expand_dims::examples_int32_2);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_3,
                           expand_dims::is_ignored_3,
                           expand_dims::examples_3);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_3,
                           expand_dims::is_ignored_relaxed_3,
                           expand_dims::examples_relaxed_3);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_3,
                           expand_dims::is_ignored_quant8_3,
                           expand_dims::examples_quant8_3);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_int32_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_3,
                           expand_dims::is_ignored_int32_3,
                           expand_dims::examples_int32_3);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_4,
                           expand_dims::is_ignored_4,
                           expand_dims::examples_4);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_4,
                           expand_dims::is_ignored_relaxed_4,
                           expand_dims::examples_relaxed_4);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_4,
                           expand_dims::is_ignored_quant8_4,
                           expand_dims::examples_quant8_4);
}

TEST_F(NeuralnetworksHidlTest, expand_dims_int32_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_4,
                           expand_dims::is_ignored_int32_4,
                           expand_dims::examples_int32_4);
}

// Generated from: lsh_projection_3_relaxed.mod.py.
namespace lsh_projection_3_relaxed {
// Generated lsh_projection_3_relaxed test
#include "examples/lsh_projection_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_3_relaxed.model.cpp"
} // namespace lsh_projection_3_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_3_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_3_relaxed::createTestModel,
                           lsh_projection_3_relaxed::is_ignored,
                           lsh_projection_3_relaxed::examples);
}

// Generated from: lsh_projection_4_relaxed.mod.py.
namespace lsh_projection_4_relaxed {
// Generated lsh_projection_4_relaxed test
#include "examples/lsh_projection_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_4_relaxed.model.cpp"
} // namespace lsh_projection_4_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_4_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_4_relaxed::createTestModel,
                           lsh_projection_4_relaxed::is_ignored,
                           lsh_projection_4_relaxed::examples);
}

// Generated from: lsh_projection_deprecated.mod.py.
namespace lsh_projection_deprecated {
// Generated lsh_projection_deprecated test
#include "examples/lsh_projection_deprecated.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_deprecated.model.cpp"
} // namespace lsh_projection_deprecated

TEST_F(NeuralnetworksHidlTest, lsh_projection_deprecated) {
  generated_tests::Execute(device,
                           lsh_projection_deprecated::createTestModel,
                           lsh_projection_deprecated::is_ignored,
                           lsh_projection_deprecated::examples);
}

// Generated from: pad_v2_1_float.mod.py.
namespace pad_v2_1_float {
// Generated pad_v2_1_float test
#include "examples/pad_v2_1_float.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_1_float.model.cpp"
} // namespace pad_v2_1_float

TEST_F(NeuralnetworksHidlTest, pad_v2_1_float) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel,
                           pad_v2_1_float::is_ignored,
                           pad_v2_1_float::examples);
}

// Generated from: pad_v2_1_float_relaxed.mod.py.
namespace pad_v2_1_float_relaxed {
// Generated pad_v2_1_float_relaxed test
#include "examples/pad_v2_1_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_1_float_relaxed.model.cpp"
} // namespace pad_v2_1_float_relaxed

TEST_F(NeuralnetworksHidlTest, pad_v2_1_float_relaxed) {
  generated_tests::Execute(device,
                           pad_v2_1_float_relaxed::createTestModel,
                           pad_v2_1_float_relaxed::is_ignored,
                           pad_v2_1_float_relaxed::examples);
}

// Generated from: pad_v2_1_quant8.mod.py.
namespace pad_v2_1_quant8 {
// Generated pad_v2_1_quant8 test
#include "examples/pad_v2_1_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_1_quant8.model.cpp"
} // namespace pad_v2_1_quant8

TEST_F(NeuralnetworksHidlTest, pad_v2_1_quant8) {
  generated_tests::Execute(device,
                           pad_v2_1_quant8::createTestModel,
                           pad_v2_1_quant8::is_ignored,
                           pad_v2_1_quant8::examples);
}

// Generated from: split_float_1.mod.py.
namespace split_float_1 {
// Generated split_float_1 test
#include "examples/split_float_1.example.cpp"
// Generated model constructor
#include "vts_models/split_float_1.model.cpp"
} // namespace split_float_1

TEST_F(NeuralnetworksHidlTest, split_float_1) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel,
                           split_float_1::is_ignored,
                           split_float_1::examples);
}

TEST_F(NeuralnetworksHidlTest, split_float_1_relaxed) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_relaxed,
                           split_float_1::is_ignored_relaxed,
                           split_float_1::examples_relaxed);
}

// Generated from: split_float_2.mod.py.
namespace split_float_2 {
// Generated split_float_2 test
#include "examples/split_float_2.example.cpp"
// Generated model constructor
#include "vts_models/split_float_2.model.cpp"
} // namespace split_float_2

TEST_F(NeuralnetworksHidlTest, split_float_2) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel,
                           split_float_2::is_ignored,
                           split_float_2::examples);
}

TEST_F(NeuralnetworksHidlTest, split_float_2_relaxed) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_relaxed,
                           split_float_2::is_ignored_relaxed,
                           split_float_2::examples_relaxed);
}

// Generated from: split_float_3.mod.py.
namespace split_float_3 {
// Generated split_float_3 test
#include "examples/split_float_3.example.cpp"
// Generated model constructor
#include "vts_models/split_float_3.model.cpp"
} // namespace split_float_3

TEST_F(NeuralnetworksHidlTest, split_float_3) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel,
                           split_float_3::is_ignored,
                           split_float_3::examples);
}

TEST_F(NeuralnetworksHidlTest, split_float_3_relaxed) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_relaxed,
                           split_float_3::is_ignored_relaxed,
                           split_float_3::examples_relaxed);
}

// Generated from: split_float_4.mod.py.
namespace split_float_4 {
// Generated split_float_4 test
#include "examples/split_float_4.example.cpp"
// Generated model constructor
#include "vts_models/split_float_4.model.cpp"
} // namespace split_float_4

TEST_F(NeuralnetworksHidlTest, split_float_4) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel,
                           split_float_4::is_ignored,
                           split_float_4::examples);
}

TEST_F(NeuralnetworksHidlTest, split_float_4_relaxed) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_relaxed,
                           split_float_4::is_ignored_relaxed,
                           split_float_4::examples_relaxed);
}

// Generated from: split_float_5.mod.py.
namespace split_float_5 {
// Generated split_float_5 test
#include "examples/split_float_5.example.cpp"
// Generated model constructor
#include "vts_models/split_float_5.model.cpp"
} // namespace split_float_5

TEST_F(NeuralnetworksHidlTest, split_float_5) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel,
                           split_float_5::is_ignored,
                           split_float_5::examples);
}

TEST_F(NeuralnetworksHidlTest, split_float_5_relaxed) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_relaxed,
                           split_float_5::is_ignored_relaxed,
                           split_float_5::examples_relaxed);
}

// Generated from: split_int32_1.mod.py.
namespace split_int32_1 {
// Generated split_int32_1 test
#include "examples/split_int32_1.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_1.model.cpp"
} // namespace split_int32_1

TEST_F(NeuralnetworksHidlTest, split_int32_1) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel,
                           split_int32_1::is_ignored,
                           split_int32_1::examples);
}

TEST_F(NeuralnetworksHidlTest, split_int32_1_relaxed) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel_relaxed,
                           split_int32_1::is_ignored_relaxed,
                           split_int32_1::examples_relaxed);
}

// Generated from: split_int32_2.mod.py.
namespace split_int32_2 {
// Generated split_int32_2 test
#include "examples/split_int32_2.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_2.model.cpp"
} // namespace split_int32_2

TEST_F(NeuralnetworksHidlTest, split_int32_2) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel,
                           split_int32_2::is_ignored,
                           split_int32_2::examples);
}

TEST_F(NeuralnetworksHidlTest, split_int32_2_relaxed) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel_relaxed,
                           split_int32_2::is_ignored_relaxed,
                           split_int32_2::examples_relaxed);
}

// Generated from: split_int32_3.mod.py.
namespace split_int32_3 {
// Generated split_int32_3 test
#include "examples/split_int32_3.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_3.model.cpp"
} // namespace split_int32_3

TEST_F(NeuralnetworksHidlTest, split_int32_3) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel,
                           split_int32_3::is_ignored,
                           split_int32_3::examples);
}

TEST_F(NeuralnetworksHidlTest, split_int32_3_relaxed) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel_relaxed,
                           split_int32_3::is_ignored_relaxed,
                           split_int32_3::examples_relaxed);
}

// Generated from: split_int32_4.mod.py.
namespace split_int32_4 {
// Generated split_int32_4 test
#include "examples/split_int32_4.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_4.model.cpp"
} // namespace split_int32_4

TEST_F(NeuralnetworksHidlTest, split_int32_4) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel,
                           split_int32_4::is_ignored,
                           split_int32_4::examples);
}

TEST_F(NeuralnetworksHidlTest, split_int32_4_relaxed) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel_relaxed,
                           split_int32_4::is_ignored_relaxed,
                           split_int32_4::examples_relaxed);
}

// Generated from: split_quant8_1.mod.py.
namespace split_quant8_1 {
// Generated split_quant8_1 test
#include "examples/split_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_1.model.cpp"
} // namespace split_quant8_1

TEST_F(NeuralnetworksHidlTest, split_quant8_1) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel,
                           split_quant8_1::is_ignored,
                           split_quant8_1::examples);
}

TEST_F(NeuralnetworksHidlTest, split_quant8_1_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel_relaxed,
                           split_quant8_1::is_ignored_relaxed,
                           split_quant8_1::examples_relaxed);
}

// Generated from: split_quant8_2.mod.py.
namespace split_quant8_2 {
// Generated split_quant8_2 test
#include "examples/split_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_2.model.cpp"
} // namespace split_quant8_2

TEST_F(NeuralnetworksHidlTest, split_quant8_2) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel,
                           split_quant8_2::is_ignored,
                           split_quant8_2::examples);
}

TEST_F(NeuralnetworksHidlTest, split_quant8_2_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel_relaxed,
                           split_quant8_2::is_ignored_relaxed,
                           split_quant8_2::examples_relaxed);
}

// Generated from: split_quant8_3.mod.py.
namespace split_quant8_3 {
// Generated split_quant8_3 test
#include "examples/split_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_3.model.cpp"
} // namespace split_quant8_3

TEST_F(NeuralnetworksHidlTest, split_quant8_3) {
  generated_tests::Execute(device,
                           split_quant8_3::createTestModel,
                           split_quant8_3::is_ignored,
                           split_quant8_3::examples);
}

// Generated from: split_quant8_4.mod.py.
namespace split_quant8_4 {
// Generated split_quant8_4 test
#include "examples/split_quant8_4.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_4.model.cpp"
} // namespace split_quant8_4

TEST_F(NeuralnetworksHidlTest, split_quant8_4) {
  generated_tests::Execute(device,
                           split_quant8_4::createTestModel,
                           split_quant8_4::is_ignored,
                           split_quant8_4::examples);
}

